// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Behavioral.Automation.Scenarios
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Providing PCR template")]
    public partial class ProvidingPCRTemplateFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "ProvidingPCRTemplate.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Providing PCR template", "As a user\r\nIn order to get primers for PCR (https://en.wikipedia.org/wiki/Polymer" +
                    "ase_chain_reaction)\r\nI want to provide a PCR template (FASTA sequence, FASTA fil" +
                    "e, refseq accession)", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
    #line hidden
#line 7
        testRunner.Given("application URL is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Providing PCR template using FASTA sequence")]
        [NUnit.Framework.CategoryAttribute("Reference:ProvidingPCRTemplate")]
        public void ProvidingPCRTemplateUsingFASTASequence()
        {
            string[] tagsOfScenario = new string[] {
                    "Reference:ProvidingPCRTemplate"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Providing PCR template using FASTA sequence", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
#line 11
        testRunner.Given(@"user entered ""CGTCCAAACCCAGCTCTATTTTAGTGGTCATGGGTTCTGGTCCCCCCGAGCGGCGCAACCGATTAGGACCATGTAGAACATTACTTATAAGTCATCTTTTAAACACAATCTTCCTGCTCAGTGGTACATGGTTTTCGCTATAGCTAGCCACCCTCATAAGTAGCACCACTTCTGCGACCCAAATGCACCCTTTCCACGAACACAGGGTTGTCCGATCCTATATTACGACTTCGGGAAGGGGTTCGCAAGTCCCACCCTAAACGATGTTGAAGGCTCAGGTTACACAGGCACAAGTACTATATATACGTGTTCCGGCTCTTAACCTGGATCGAAAGCACAATCATGCATCGTACCAGTGTGTTCGTGTCATCTAGGACGGGCGCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTACACCTACCCGTCACCGGCCAACAATGTGCGGATGGCGCTACGACTTACTGGGCCTGATTTCACCGCTTTTAATACCGCACACTGGGCAATACGAGGTCAAGCCAGTCACCCAGTAACGTTCATCAGCTAACGTAACGGTTAGAGGCTCACTAAATCGCACTGTCGGCGTCCCTTGGGTATTTTACGTTAGCATCAGGTAGACTAGCATGTATCTTTACTCCCAGGGGAATACGGGTGCGTGGACAAGCGAGCAGCAAACGTAAATTCTCGGCGTGCTTGGTGTCTCGTATTTCTCTTGGAGATCGAGGAAATGTTTCATGACCAAGGGAAAGGTCGCCCTACGGAATAGATTTGCGTTACTGCCTGCATAAGGAGTCCGGTGTAGCCAAGGACGAAGGCGACCCTAGGTAGTAACCGTCGGCTTCGGCGGTAAGGTATCACTCAGGAAGCAGACACAGATAGACACGGTCTAGCAGATCGTTTAACGACTAGGTCAAATAGAGTGCTTTGATATCGGCATGTCTGGCTTTAGAATTCAGTATAGTGCGCTGATCCGAGTCGAGATAAAAACACCA"" into ""Template"" input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
        testRunner.And("\"Perform specificity check\" checkbox is unchecked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
        testRunner.When("user clicks on \"Get primers\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
        testRunner.Then("\"Primers design\" table should become visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Providing PCR template using FASTA file")]
        [NUnit.Framework.CategoryAttribute("Reference:ProvidingPCRTemplate")]
        public void ProvidingPCRTemplateUsingFASTAFile()
        {
            string[] tagsOfScenario = new string[] {
                    "Reference:ProvidingPCRTemplate"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Providing PCR template using FASTA file", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
#line 18
        testRunner.Given("\"Perform specificity check\" checkbox is unchecked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
        testRunner.When("user uploads \"TestData/CFTR_mRNA_sequence.fasta\" after clicking on \"Choose templa" +
                        "te file\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
        testRunner.And("user clicks on \"Get primers\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
        testRunner.Then("\"Primers design\" table should become visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Providing DNA template using refseq accession and existing primers")]
        [NUnit.Framework.CategoryAttribute("Reference:ProvidingPCRTemplate")]
        public void ProvidingDNATemplateUsingRefseqAccessionAndExistingPrimers()
        {
            string[] tagsOfScenario = new string[] {
                    "Reference:ProvidingPCRTemplate"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Providing DNA template using refseq accession and existing primers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
#line 25
        testRunner.Given("user entered \"NM_002046.7\" into \"Template\" input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 26
        testRunner.And("user entered \"GAGAAGGCTGGGGCTCATTT\" into \"Forward primer\" input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
        testRunner.And("user entered \"AGTGATGGCATGGACTGTGG\" into \"Reverse primer\" input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
        testRunner.And("\"Perform specificity check\" checkbox is unchecked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
        testRunner.When("user clicks on \"Get primers\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
        testRunner.Then("\"Primers design\" table should become visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Providing PCR template using refseq accession")]
        [NUnit.Framework.CategoryAttribute("Reference:ProvidingPCRTemplate")]
        public void ProvidingPCRTemplateUsingRefseqAccession()
        {
            string[] tagsOfScenario = new string[] {
                    "Reference:ProvidingPCRTemplate"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Providing PCR template using refseq accession", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
#line 34
        testRunner.Given("user entered \"NM_002046.7\" into \"Template\" input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
        testRunner.And("\"Perform specificity check\" checkbox is unchecked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
        testRunner.When("user clicks on \"Get primers\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
        testRunner.Then("\"Primers design\" table should become visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Providing PCR template to get primers from the chosen area")]
        [NUnit.Framework.CategoryAttribute("Reference:ProvidingPCRTemplate")]
        public void ProvidingPCRTemplateToGetPrimersFromTheChosenArea()
        {
            string[] tagsOfScenario = new string[] {
                    "Reference:ProvidingPCRTemplate"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Providing PCR template to get primers from the chosen area", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
#line 41
        testRunner.Given(@"user entered ""CGTCCAAACCCAGCTCTATTTTAGTGGTCATGGGTTCTGGTCCCCCCGAGCGGCGCAACCGATTAGGACCATGTAGAACATTACTTATAAGTCATCTTTTAAACACAATCTTCCTGCTCAGTGGTACATGGTTTTCGCTATAGCTAGCCACCCTCATAAGTAGCACCACTTCTGCGACCCAAATGCACCCTTTCCACGAACACAGGGTTGTCCGATCCTATATTACGACTTCGGGAAGGGGTTCGCAAGTCCCACCCTAAACGATGTTGAAGGCTCAGGTTACACAGGCACAAGTACTATATATACGTGTTCCGGCTCTTAACCTGGATCGAAAGCACAATCATGCATCGTACCAGTGTGTTCGTGTCATCTAGGACGGGCGCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTACACCTACCCGTCACCGGCCAACAATGTGCGGATGGCGCTACGACTTACTGGGCCTGATTTCACCGCTTTTAATACCGCACACTGGGCAATACGAGGTCAAGCCAGTCACCCAGTAACGTTCATCAGCTAACGTAACGGTTAGAGGCTCACTAAATCGCACTGTCGGCGTCCCTTGGGTATTTTACGTTAGCATCAGGTAGACTAGCATGTATCTTTACTCCCAGGGGAATACGGGTGCGTGGACAAGCGAGCAGCAAACGTAAATTCTCGGCGTGCTTGGTGTCTCGTATTTCTCTTGGAGATCGAGGAAATGTTTCATGACCAAGGGAAAGGTCGCCCTACGGAATAGATTTGCGTTACTGCCTGCATAAGGAGTCCGGTGTAGCCAAGGACGAAGGCGACCCTAGGTAGTAACCGTCGGCTTCGGCGGTAAGGTATCACTCAGGAAGCAGACACAGATAGACACGGTCTAGCAGATCGTTTAACGACTAGGTCAAATAGAGTGCTTTGATATCGGCATGTCTGGCTTTAGAATTCAGTATAGTGCGCTGATCCGAGTCGAGATAAAAACACCA"" into ""Template"" input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 42
        testRunner.And("user entered \"10\" into \"Forward primer from\" input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
        testRunner.And("user entered \"90\" into \"Forward primer to\" input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
        testRunner.And("user entered \"600\" into \"Reverse primer from\" input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
        testRunner.And("user entered \"1000\" into \"Reverse primer to\" input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
        testRunner.And("\"Perform specificity check\" checkbox is unchecked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
        testRunner.When("user clicks on \"Get primers\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
        testRunner.Then("\"Primers design\" table should become visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Providing PCR template and choosing inappropriate area")]
        [NUnit.Framework.CategoryAttribute("Reference:NegativeCase")]
        [NUnit.Framework.CategoryAttribute("Reference:ProvidingPCRTemplate")]
        public void ProvidingPCRTemplateAndChoosingInappropriateArea()
        {
            string[] tagsOfScenario = new string[] {
                    "Reference:NegativeCase",
                    "Reference:ProvidingPCRTemplate"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Providing PCR template and choosing inappropriate area", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
#line 53
        testRunner.Given(@"user entered ""CGTCCAAACCCAGCTCTATTTTAGTGGTCATGGGTTCTGGTCCCCCCGAGCGGCGCAACCGATTAGGACCATGTAGAACATTACTTATAAGTCATCTTTTAAACACAATCTTCCTGCTCAGTGGTACATGGTTTTCGCTATAGCTAGCCACCCTCATAAGTAGCACCACTTCTGCGACCCAAATGCACCCTTTCCACGAACACAGGGTTGTCCGATCCTATATTACGACTTCGGGAAGGGGTTCGCAAGTCCCACCCTAAACGATGTTGAAGGCTCAGGTTACACAGGCACAAGTACTATATATACGTGTTCCGGCTCTTAACCTGGATCGAAAGCACAATCATGCATCGTACCAGTGTGTTCGTGTCATCTAGGACGGGCGCATAGGATATATAATTCAATTAAGAATACCTTATACTACTGTACACCTACCCGTCACCGGCCAACAATGTGCGGATGGCGCTACGACTTACTGGGCCTGATTTCACCGCTTTTAATACCGCACACTGGGCAATACGAGGTCAAGCCAGTCACCCAGTAACGTTCATCAGCTAACGTAACGGTTAGAGGCTCACTAAATCGCACTGTCGGCGTCCCTTGGGTATTTTACGTTAGCATCAGGTAGACTAGCATGTATCTTTACTCCCAGGGGAATACGGGTGCGTGGACAAGCGAGCAGCAAACGTAAATTCTCGGCGTGCTTGGTGTCTCGTATTTCTCTTGGAGATCGAGGAAATGTTTCATGACCAAGGGAAAGGTCGCCCTACGGAATAGATTTGCGTTACTGCCTGCATAAGGAGTCCGGTGTAGCCAAGGACGAAGGCGACCCTAGGTAGTAACCGTCGGCTTCGGCGGTAAGGTATCACTCAGGAAGCAGACACAGATAGACACGGTCTAGCAGATCGTTTAACGACTAGGTCAAATAGAGTGCTTTGATATCGGCATGTCTGGCTTTAGAATTCAGTATAGTGCGCTGATCCGAGTCGAGATAAAAACACCA"" into ""Template"" input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 54
        testRunner.And("user entered \"5\" into \"Forward primer from\" input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
        testRunner.And("user entered \"50\" into \"Forward primer to\" input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
        testRunner.And("user entered \"40\" into \"Reverse primer from\" input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
        testRunner.And("user entered \"100\" into \"Reverse primer to\" input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
        testRunner.And("\"Perform specificity check\" checkbox is unchecked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
        testRunner.When("user clicks on \"Get primers\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
        testRunner.Then("label \"Error\" should have \"Forward primer range may not overlap with reverse prim" +
                        "er range: forward from = 5, forward to = 50, reverse from = 40, reverse to = 100" +
                        ".\" text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Providing inappropriate PCR template")]
        [NUnit.Framework.CategoryAttribute("Reference:NegativeCase")]
        [NUnit.Framework.CategoryAttribute("Reference:ProvidingPCRTemplate")]
        public void ProvidingInappropriatePCRTemplate()
        {
            string[] tagsOfScenario = new string[] {
                    "Reference:NegativeCase",
                    "Reference:ProvidingPCRTemplate"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Providing inappropriate PCR template", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
#line 65
        testRunner.Given("user entered \"CGTCCAAACCCAGCTCTATTTTAGTGGTCATGGGT\" into \"Template\" input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 66
        testRunner.And("\"Perform specificity check\" checkbox is unchecked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
        testRunner.When("user clicks on \"Get primers\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
        testRunner.Then("label \"Error\" should have \"PCR template length (35) is shorter than specified pro" +
                        "duct min length 70. Effective template length (35) is shorter than specified pro" +
                        "duct length ( 70).\" text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Providing blank PCR template")]
        [NUnit.Framework.CategoryAttribute("Reference:NegativeCase")]
        [NUnit.Framework.CategoryAttribute("Reference:ProvidingPCRTemplate")]
        public void ProvidingBlankPCRTemplate()
        {
            string[] tagsOfScenario = new string[] {
                    "Reference:NegativeCase",
                    "Reference:ProvidingPCRTemplate"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Providing blank PCR template", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
#line 73
        testRunner.Given("user entered \" \" into \"Template\" input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 74
        testRunner.And("\"Perform specificity check\" checkbox is unchecked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
        testRunner.When("user clicks on \"Get primers\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
        testRunner.Then("label \"Error\" should have \"Exception error: No sequence input was provided . \" te" +
                        "xt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
